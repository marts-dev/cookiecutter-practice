{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to cookiecutter_practice","text":"<p>Python Boilerplate contains all the boilerplate you need to create a Python package.</p> <p>This package was built as an exercise for geog-510 Lab 3 Exercise.</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://marts-dev.github.io/cookiecutter_practice</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Map Creation using <code>LeafMap</code></li> <li>Map Creation using <code>FoliumMap</code></li> <li>Supports different basemap/layer tiles from https://leaflet-extras.github.io/leaflet-providers/preview/</li> </ul>"},{"location":"FoliumMap/","title":"FoliumMap module","text":""},{"location":"FoliumMap/#cookiecutter_practice.FoliumMap.Map","title":"<code> Map            (Map)         </code>","text":"Source code in <code>cookiecutter_practice/FoliumMap.py</code> <pre><code>class Map(folium.Map):\n    def __init__(self, center=(20, 0), zoom=2, height=\"100%\", **kwargs):\n        \"\"\"Create a FoliumMap Map instance.\n\n        Params:\n            center (tuple): The center of the map (latitude, longitude)\n            zoom (int): The initial zoom level of the map\n            height (str): The height of the map\n            **kwargs (dict): Additional keyword arguments\n\n        \"\"\"\n        super().__init__(location=center, zoom_start=zoom, height=height, **kwargs)\n        # self.add_control(ipyleaflet.LayersControl())\n\n    def add_basemap(self, basemap=\"OpenStreetMap\"):\n        \"\"\"Add a basemap/layer to the map.\n\n        Params:\n            basemap (str): The name of the basemap/layer to add. Can be one of the following: 'OpenStreetMap', 'Stamen Terrain', 'Stamen Toner', 'Stamen Watercolor', 'CartoDB positron', 'CartoDB dark_matter', 'OpenTopoMap'\n\n        You may refer here for other basemaps to use: [Leaflet Providers](https://leaflet-extras.github.io/leaflet-providers/preview/)\n\n        \"\"\"\n        try:\n            folium.TileLayer(basemap).add_to(self)\n        except ValueError:\n            logging.warning(f\"Basemap {basemap} not found. No basemap added.\")\n            folium.TileLayer(\"OpenStreetMap\").add_to(self)\n\n    def add_layer_control(self, position=\"topright\"):\n        \"\"\"Add a layer control to the map.\n\n        Params:\n            position (str): The position of the control (one of the map corners), can be 'topleft', 'topright', 'bottomleft' or 'bottomright'\n\n        \"\"\"\n        if position not in [\"topleft\", \"topright\", \"bottomleft\", \"bottomright\"]:\n            logging.warning(f\"Position {position} not valid. Using topright instead.\")\n            folium.LayerControl(position=\"topright\").add_to(self)\n        else:\n            folium.LayerControl(position=position).add_to(self)\n\n    def add_vector(self, name, url=None, geo_data=None, **kwargs):\n        \"\"\"Add a vector layer to the map.\n\n        Params:\n            name (str): The name of the vector layer\n            url (str, path object or file-like object): Either the absolute or relative path to the file or URL to be opened, or any object with a read() method (such as an open file or StringIO)\n            geo_data (geopandas.GeoDataFrame): A GeoDataFrame containing the vector data\n            style (dict, function): A dictionary of Folium Path options or a function defining the style of the vector layer\n            highlight_style (dict, function): A dictionary of Folium Path options or a function defining the style of the vector layer when highlighted\n\n        Examples:\n            ```python\n            m = FoliumMap.Map()\n            m.add_vector(name='countries', url='https://ipyleaflet.readthedocs.io/en/latest/_downloads/countries.geo.json', style={'color': 'black', 'fillColor': '#3366cc', 'opacity':0.05, 'weight':1.9, 'dashArray':'2', 'fillOpacity':0.6}, highlight_style={'fillColor': 'red' })\n            ```\n        \"\"\"\n\n        def style_function(feature):\n            default = style\n            return default\n\n        def highlight_function(feature):\n            default = highlight_style\n            return default\n\n        if \"style\" in kwargs:\n            style = kwargs[\"style\"]\n            kwargs.pop(\"style\")\n            if callable(style):\n                style_function = style\n        else:\n            style = {\n                \"color\": \"black\",\n                \"fillColor\": \"green\",\n                \"opacity\": 0.05,\n                \"weight\": 1.9,\n                \"dashArray\": \"2\",\n                \"fillOpacity\": 0.6,\n            }\n\n        if \"highlight_style\" in kwargs:\n            highlight_style = kwargs[\"highlight_style\"]\n            kwargs.pop(\"highlight_style\")\n            if callable(highlight_style):\n                highlight_function = highlight_style\n        else:\n            highlight_style = {\"fillColor\": \"red\"}\n\n        if url is None and geo_data is None:\n            logging.warning(f\"Please provide either a URL or a GeoDataFrame.\")\n            return\n        if url is not None and geo_data is not None:\n            logging.warning(f\"Please provide only one of URL or GeoDataFrame.\")\n            return\n\n        if url is not None:\n            try:\n                gdf = gpd.read_file(url)\n                gj = folium.GeoJson(\n                    gdf,\n                    name=name,\n                    style_function=style_function,\n                    highlight_function=highlight_function,\n                    **kwargs,\n                )\n\n                fg = folium.FeatureGroup(name=name, show=True)\n                fg.add_to(self)\n                gj.add_to(fg)\n                return\n            except Exception:\n                logging.warning(f\"There was an error adding the vector layer.\")\n        if geo_data is not None:\n            try:\n                folium.GeoJson(\n                    geo_data,\n                    name=name,\n                    style_function=style_function,\n                    highlight_function=highlight_function,\n                    **kwargs,\n                ).add_to(self)\n                return\n            except Exception:\n                logging.warning(f\"There was an error adding the vector layer.\")\n\n    def add_raster(self, url, name, colormap=None, opacity=1.0, **kwargs):\n        \"\"\"Add a raster layer to the map.\n\n        Params:\n            url (str): The URL of the raster layer\n            name (str): The name of the raster layer\n            colormap (str): The colormap to use for the raster layer\n            opacity (float): The opacity of the raster layer\n            **kwargs: Additional keyword arguments\n\n        Examples:\n            ```python\n            m = FoliumMap.Map()\n            m.add_raster(url='https://example.com/raster.tif', name='raster', colormap='viridis', opacity=0.5)\n            ```\n        \"\"\"\n        from localtileserver import TileClient, get_folium_tile_layer\n\n        if url is None:\n            logging.warning(f\"Please provide a URL.\")\n            return\n\n        try:\n            client = TileClient(url)\n            raster_layer = get_folium_tile_layer(\n                client, name=name, colormap=colormap, opacity=opacity, **kwargs\n            )\n            fg = folium.FeatureGroup(name=name, show=True)\n            fg.add_to(self)\n            raster_layer.add_to(fg)\n            north, south, west, east = client.bounds()\n            self.fit_bounds(((south, west), (north, east)))\n            return\n        except Exception as e:\n            logging.warning(f\"There was an error adding the raster layer: {e}\")\n\n    def add_image(self, url, bounds=None, opacity=1.0, **kwargs):\n        \"\"\"Add an image layer to the map.\n\n        Params:\n            url (str): The URL of the image layer\n            bounds (tuple): The bounds of the image layer ((south, west), (north, east))\n            opacity (float): The opacity of the image layer\n            **kwargs: Additional keyword arguments\n\n        Examples:\n            ```python\n            m = FoliumMap.Map()\n            m.add_image(url='https://example.com/image.png', bounds=((40, -100), (30, -90)), opacity=0.5)\n            ```\n        \"\"\"\n        if url is None:\n            logging.warning(f\"Please provide a URL.\")\n            return\n        if bounds is None:\n            bounds = ((-90, -180), (90, 180))\n\n        try:\n            folium.raster_layers.ImageOverlay(\n                image=url, bounds=bounds, opacity=opacity, **kwargs\n            ).add_to(self)\n            self.fit_bounds(bounds)\n        except Exception as e:\n            logging.warning(f\"There was an error adding the image layer: {e}\")\n\n    def add_video(self, url, bounds=None, opacity=1.0, **kwargs):\n        \"\"\"Add a video layer to the map.\n\n        Params:\n            url (str): The URL of the video layer\n            bounds (tuple): The bounds of the video layer ((south, west), (north, east))\n            opacity (float): The opacity of the video layer\n            **kwargs: Additional keyword arguments\n\n        Examples:\n            ```python\n            m = FoliumMap.Map()\n            m.add_video(url='https://example.com/video.mp4', bounds=((40, -100), (30, -90)), opacity=0.5)\n            ```\n        \"\"\"\n        if url is None:\n            logging.warning(f\"Please provide a URL.\")\n            return\n        if bounds is None:\n            bounds = ((-90, -180), (90, 180))\n\n        try:\n            folium.raster_layers.VideoOverlay(\n                video_url=url, bounds=bounds, opacity=opacity, **kwargs\n            ).add_to(self)\n            self.fit_bounds(bounds)\n        except Exception as e:\n            logging.warning(f\"There was an error adding the video layer: {e}\")\n\n    def add_wms_layer(\n        self, url, layers, name, format=\"image/png\", transparent=True, **kwargs\n    ):\n        \"\"\"Add a WMS layer to the map.\n\n        Params:\n            url (str): The URL of the WMS layer\n            layers (str): The layers of the WMS layer\n            name (str): The name of the WMS layer\n            format (str): The format of the WMS layer\n            transparent (bool): Whether the WMS layer is transparent\n            **kwargs: Additional keyword arguments\n\n        Examples:\n            ```python\n            m = FoliumMap.Map()\n            m.add_wms_layer(url=\"https://ows.terrestris.de/osm/service\",\n                layers=\"OSM-WMS\",\n                name=\"WMS Layer\",\n                format=\"image/png\",\n                transparent=True,\n            )\n            ```\n        \"\"\"\n        if url is None:\n            logging.warning(f\"Please provide a URL.\")\n            return\n\n        try:\n            folium.WmsTileLayer(\n                url=url,\n                layers=layers,\n                name=name,\n                fmt=format,\n                transparent=transparent,\n                **kwargs,\n            ).add_to(self)\n        except Exception as e:\n            logging.warning(f\"There was an error adding the WMS layer: {e}\")\n</code></pre>"},{"location":"FoliumMap/#cookiecutter_practice.FoliumMap.Map.__init__","title":"<code>__init__(self, center=(20, 0), zoom=2, height='100%', **kwargs)</code>  <code>special</code>","text":"<p>Create a FoliumMap Map instance.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>tuple</code> <p>The center of the map (latitude, longitude)</p> <code>(20, 0)</code> <code>zoom</code> <code>int</code> <p>The initial zoom level of the map</p> <code>2</code> <code>height</code> <code>str</code> <p>The height of the map</p> <code>'100%'</code> <code>**kwargs</code> <code>dict</code> <p>Additional keyword arguments</p> <code>{}</code> Source code in <code>cookiecutter_practice/FoliumMap.py</code> <pre><code>def __init__(self, center=(20, 0), zoom=2, height=\"100%\", **kwargs):\n    \"\"\"Create a FoliumMap Map instance.\n\n    Params:\n        center (tuple): The center of the map (latitude, longitude)\n        zoom (int): The initial zoom level of the map\n        height (str): The height of the map\n        **kwargs (dict): Additional keyword arguments\n\n    \"\"\"\n    super().__init__(location=center, zoom_start=zoom, height=height, **kwargs)\n    # self.add_control(ipyleaflet.LayersControl())\n</code></pre>"},{"location":"FoliumMap/#cookiecutter_practice.FoliumMap.Map.add_basemap","title":"<code>add_basemap(self, basemap='OpenStreetMap')</code>","text":"<p>Add a basemap/layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>basemap</code> <code>str</code> <p>The name of the basemap/layer to add. Can be one of the following: 'OpenStreetMap', 'Stamen Terrain', 'Stamen Toner', 'Stamen Watercolor', 'CartoDB positron', 'CartoDB dark_matter', 'OpenTopoMap'</p> <code>'OpenStreetMap'</code> <p>You may refer here for other basemaps to use: Leaflet Providers</p> Source code in <code>cookiecutter_practice/FoliumMap.py</code> <pre><code>def add_basemap(self, basemap=\"OpenStreetMap\"):\n    \"\"\"Add a basemap/layer to the map.\n\n    Params:\n        basemap (str): The name of the basemap/layer to add. Can be one of the following: 'OpenStreetMap', 'Stamen Terrain', 'Stamen Toner', 'Stamen Watercolor', 'CartoDB positron', 'CartoDB dark_matter', 'OpenTopoMap'\n\n    You may refer here for other basemaps to use: [Leaflet Providers](https://leaflet-extras.github.io/leaflet-providers/preview/)\n\n    \"\"\"\n    try:\n        folium.TileLayer(basemap).add_to(self)\n    except ValueError:\n        logging.warning(f\"Basemap {basemap} not found. No basemap added.\")\n        folium.TileLayer(\"OpenStreetMap\").add_to(self)\n</code></pre>"},{"location":"FoliumMap/#cookiecutter_practice.FoliumMap.Map.add_image","title":"<code>add_image(self, url, bounds=None, opacity=1.0, **kwargs)</code>","text":"<p>Add an image layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the image layer</p> required <code>bounds</code> <code>tuple</code> <p>The bounds of the image layer ((south, west), (north, east))</p> <code>None</code> <code>opacity</code> <code>float</code> <p>The opacity of the image layer</p> <code>1.0</code> <code>**kwargs</code> <p>Additional keyword arguments</p> <code>{}</code> <p>Examples:</p> <pre><code>m = FoliumMap.Map()\nm.add_image(url='https://example.com/image.png', bounds=((40, -100), (30, -90)), opacity=0.5)\n</code></pre> Source code in <code>cookiecutter_practice/FoliumMap.py</code> <pre><code>def add_image(self, url, bounds=None, opacity=1.0, **kwargs):\n    \"\"\"Add an image layer to the map.\n\n    Params:\n        url (str): The URL of the image layer\n        bounds (tuple): The bounds of the image layer ((south, west), (north, east))\n        opacity (float): The opacity of the image layer\n        **kwargs: Additional keyword arguments\n\n    Examples:\n        ```python\n        m = FoliumMap.Map()\n        m.add_image(url='https://example.com/image.png', bounds=((40, -100), (30, -90)), opacity=0.5)\n        ```\n    \"\"\"\n    if url is None:\n        logging.warning(f\"Please provide a URL.\")\n        return\n    if bounds is None:\n        bounds = ((-90, -180), (90, 180))\n\n    try:\n        folium.raster_layers.ImageOverlay(\n            image=url, bounds=bounds, opacity=opacity, **kwargs\n        ).add_to(self)\n        self.fit_bounds(bounds)\n    except Exception as e:\n        logging.warning(f\"There was an error adding the image layer: {e}\")\n</code></pre>"},{"location":"FoliumMap/#cookiecutter_practice.FoliumMap.Map.add_layer_control","title":"<code>add_layer_control(self, position='topright')</code>","text":"<p>Add a layer control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the control (one of the map corners), can be 'topleft', 'topright', 'bottomleft' or 'bottomright'</p> <code>'topright'</code> Source code in <code>cookiecutter_practice/FoliumMap.py</code> <pre><code>def add_layer_control(self, position=\"topright\"):\n    \"\"\"Add a layer control to the map.\n\n    Params:\n        position (str): The position of the control (one of the map corners), can be 'topleft', 'topright', 'bottomleft' or 'bottomright'\n\n    \"\"\"\n    if position not in [\"topleft\", \"topright\", \"bottomleft\", \"bottomright\"]:\n        logging.warning(f\"Position {position} not valid. Using topright instead.\")\n        folium.LayerControl(position=\"topright\").add_to(self)\n    else:\n        folium.LayerControl(position=position).add_to(self)\n</code></pre>"},{"location":"FoliumMap/#cookiecutter_practice.FoliumMap.Map.add_raster","title":"<code>add_raster(self, url, name, colormap=None, opacity=1.0, **kwargs)</code>","text":"<p>Add a raster layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the raster layer</p> required <code>name</code> <code>str</code> <p>The name of the raster layer</p> required <code>colormap</code> <code>str</code> <p>The colormap to use for the raster layer</p> <code>None</code> <code>opacity</code> <code>float</code> <p>The opacity of the raster layer</p> <code>1.0</code> <code>**kwargs</code> <p>Additional keyword arguments</p> <code>{}</code> <p>Examples:</p> <pre><code>m = FoliumMap.Map()\nm.add_raster(url='https://example.com/raster.tif', name='raster', colormap='viridis', opacity=0.5)\n</code></pre> Source code in <code>cookiecutter_practice/FoliumMap.py</code> <pre><code>def add_raster(self, url, name, colormap=None, opacity=1.0, **kwargs):\n    \"\"\"Add a raster layer to the map.\n\n    Params:\n        url (str): The URL of the raster layer\n        name (str): The name of the raster layer\n        colormap (str): The colormap to use for the raster layer\n        opacity (float): The opacity of the raster layer\n        **kwargs: Additional keyword arguments\n\n    Examples:\n        ```python\n        m = FoliumMap.Map()\n        m.add_raster(url='https://example.com/raster.tif', name='raster', colormap='viridis', opacity=0.5)\n        ```\n    \"\"\"\n    from localtileserver import TileClient, get_folium_tile_layer\n\n    if url is None:\n        logging.warning(f\"Please provide a URL.\")\n        return\n\n    try:\n        client = TileClient(url)\n        raster_layer = get_folium_tile_layer(\n            client, name=name, colormap=colormap, opacity=opacity, **kwargs\n        )\n        fg = folium.FeatureGroup(name=name, show=True)\n        fg.add_to(self)\n        raster_layer.add_to(fg)\n        north, south, west, east = client.bounds()\n        self.fit_bounds(((south, west), (north, east)))\n        return\n    except Exception as e:\n        logging.warning(f\"There was an error adding the raster layer: {e}\")\n</code></pre>"},{"location":"FoliumMap/#cookiecutter_practice.FoliumMap.Map.add_vector","title":"<code>add_vector(self, name, url=None, geo_data=None, **kwargs)</code>","text":"<p>Add a vector layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the vector layer</p> required <code>url</code> <code>str, path object or file-like object</code> <p>Either the absolute or relative path to the file or URL to be opened, or any object with a read() method (such as an open file or StringIO)</p> <code>None</code> <code>geo_data</code> <code>geopandas.GeoDataFrame</code> <p>A GeoDataFrame containing the vector data</p> <code>None</code> <code>style</code> <code>dict, function</code> <p>A dictionary of Folium Path options or a function defining the style of the vector layer</p> required <code>highlight_style</code> <code>dict, function</code> <p>A dictionary of Folium Path options or a function defining the style of the vector layer when highlighted</p> required <p>Examples:</p> <pre><code>m = FoliumMap.Map()\nm.add_vector(name='countries', url='https://ipyleaflet.readthedocs.io/en/latest/_downloads/countries.geo.json', style={'color': 'black', 'fillColor': '#3366cc', 'opacity':0.05, 'weight':1.9, 'dashArray':'2', 'fillOpacity':0.6}, highlight_style={'fillColor': 'red' })\n</code></pre> Source code in <code>cookiecutter_practice/FoliumMap.py</code> <pre><code>def add_vector(self, name, url=None, geo_data=None, **kwargs):\n    \"\"\"Add a vector layer to the map.\n\n    Params:\n        name (str): The name of the vector layer\n        url (str, path object or file-like object): Either the absolute or relative path to the file or URL to be opened, or any object with a read() method (such as an open file or StringIO)\n        geo_data (geopandas.GeoDataFrame): A GeoDataFrame containing the vector data\n        style (dict, function): A dictionary of Folium Path options or a function defining the style of the vector layer\n        highlight_style (dict, function): A dictionary of Folium Path options or a function defining the style of the vector layer when highlighted\n\n    Examples:\n        ```python\n        m = FoliumMap.Map()\n        m.add_vector(name='countries', url='https://ipyleaflet.readthedocs.io/en/latest/_downloads/countries.geo.json', style={'color': 'black', 'fillColor': '#3366cc', 'opacity':0.05, 'weight':1.9, 'dashArray':'2', 'fillOpacity':0.6}, highlight_style={'fillColor': 'red' })\n        ```\n    \"\"\"\n\n    def style_function(feature):\n        default = style\n        return default\n\n    def highlight_function(feature):\n        default = highlight_style\n        return default\n\n    if \"style\" in kwargs:\n        style = kwargs[\"style\"]\n        kwargs.pop(\"style\")\n        if callable(style):\n            style_function = style\n    else:\n        style = {\n            \"color\": \"black\",\n            \"fillColor\": \"green\",\n            \"opacity\": 0.05,\n            \"weight\": 1.9,\n            \"dashArray\": \"2\",\n            \"fillOpacity\": 0.6,\n        }\n\n    if \"highlight_style\" in kwargs:\n        highlight_style = kwargs[\"highlight_style\"]\n        kwargs.pop(\"highlight_style\")\n        if callable(highlight_style):\n            highlight_function = highlight_style\n    else:\n        highlight_style = {\"fillColor\": \"red\"}\n\n    if url is None and geo_data is None:\n        logging.warning(f\"Please provide either a URL or a GeoDataFrame.\")\n        return\n    if url is not None and geo_data is not None:\n        logging.warning(f\"Please provide only one of URL or GeoDataFrame.\")\n        return\n\n    if url is not None:\n        try:\n            gdf = gpd.read_file(url)\n            gj = folium.GeoJson(\n                gdf,\n                name=name,\n                style_function=style_function,\n                highlight_function=highlight_function,\n                **kwargs,\n            )\n\n            fg = folium.FeatureGroup(name=name, show=True)\n            fg.add_to(self)\n            gj.add_to(fg)\n            return\n        except Exception:\n            logging.warning(f\"There was an error adding the vector layer.\")\n    if geo_data is not None:\n        try:\n            folium.GeoJson(\n                geo_data,\n                name=name,\n                style_function=style_function,\n                highlight_function=highlight_function,\n                **kwargs,\n            ).add_to(self)\n            return\n        except Exception:\n            logging.warning(f\"There was an error adding the vector layer.\")\n</code></pre>"},{"location":"FoliumMap/#cookiecutter_practice.FoliumMap.Map.add_video","title":"<code>add_video(self, url, bounds=None, opacity=1.0, **kwargs)</code>","text":"<p>Add a video layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the video layer</p> required <code>bounds</code> <code>tuple</code> <p>The bounds of the video layer ((south, west), (north, east))</p> <code>None</code> <code>opacity</code> <code>float</code> <p>The opacity of the video layer</p> <code>1.0</code> <code>**kwargs</code> <p>Additional keyword arguments</p> <code>{}</code> <p>Examples:</p> <pre><code>m = FoliumMap.Map()\nm.add_video(url='https://example.com/video.mp4', bounds=((40, -100), (30, -90)), opacity=0.5)\n</code></pre> Source code in <code>cookiecutter_practice/FoliumMap.py</code> <pre><code>def add_video(self, url, bounds=None, opacity=1.0, **kwargs):\n    \"\"\"Add a video layer to the map.\n\n    Params:\n        url (str): The URL of the video layer\n        bounds (tuple): The bounds of the video layer ((south, west), (north, east))\n        opacity (float): The opacity of the video layer\n        **kwargs: Additional keyword arguments\n\n    Examples:\n        ```python\n        m = FoliumMap.Map()\n        m.add_video(url='https://example.com/video.mp4', bounds=((40, -100), (30, -90)), opacity=0.5)\n        ```\n    \"\"\"\n    if url is None:\n        logging.warning(f\"Please provide a URL.\")\n        return\n    if bounds is None:\n        bounds = ((-90, -180), (90, 180))\n\n    try:\n        folium.raster_layers.VideoOverlay(\n            video_url=url, bounds=bounds, opacity=opacity, **kwargs\n        ).add_to(self)\n        self.fit_bounds(bounds)\n    except Exception as e:\n        logging.warning(f\"There was an error adding the video layer: {e}\")\n</code></pre>"},{"location":"FoliumMap/#cookiecutter_practice.FoliumMap.Map.add_wms_layer","title":"<code>add_wms_layer(self, url, layers, name, format='image/png', transparent=True, **kwargs)</code>","text":"<p>Add a WMS layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the WMS layer</p> required <code>layers</code> <code>str</code> <p>The layers of the WMS layer</p> required <code>name</code> <code>str</code> <p>The name of the WMS layer</p> required <code>format</code> <code>str</code> <p>The format of the WMS layer</p> <code>'image/png'</code> <code>transparent</code> <code>bool</code> <p>Whether the WMS layer is transparent</p> <code>True</code> <code>**kwargs</code> <p>Additional keyword arguments</p> <code>{}</code> <p>Examples:</p> <pre><code>m = FoliumMap.Map()\nm.add_wms_layer(url=\"https://ows.terrestris.de/osm/service\",\n    layers=\"OSM-WMS\",\n    name=\"WMS Layer\",\n    format=\"image/png\",\n    transparent=True,\n)\n</code></pre> Source code in <code>cookiecutter_practice/FoliumMap.py</code> <pre><code>def add_wms_layer(\n    self, url, layers, name, format=\"image/png\", transparent=True, **kwargs\n):\n    \"\"\"Add a WMS layer to the map.\n\n    Params:\n        url (str): The URL of the WMS layer\n        layers (str): The layers of the WMS layer\n        name (str): The name of the WMS layer\n        format (str): The format of the WMS layer\n        transparent (bool): Whether the WMS layer is transparent\n        **kwargs: Additional keyword arguments\n\n    Examples:\n        ```python\n        m = FoliumMap.Map()\n        m.add_wms_layer(url=\"https://ows.terrestris.de/osm/service\",\n            layers=\"OSM-WMS\",\n            name=\"WMS Layer\",\n            format=\"image/png\",\n            transparent=True,\n        )\n        ```\n    \"\"\"\n    if url is None:\n        logging.warning(f\"Please provide a URL.\")\n        return\n\n    try:\n        folium.WmsTileLayer(\n            url=url,\n            layers=layers,\n            name=name,\n            fmt=format,\n            transparent=transparent,\n            **kwargs,\n        ).add_to(self)\n    except Exception as e:\n        logging.warning(f\"There was an error adding the WMS layer: {e}\")\n</code></pre>"},{"location":"LeafMap/","title":"LeafMap module","text":""},{"location":"LeafMap/#cookiecutter_practice.LeafMap.Map","title":"<code> Map            (Map)         </code>","text":"Source code in <code>cookiecutter_practice/LeafMap.py</code> <pre><code>class Map(ipyleaflet.Map):\n    __layer_control = None\n    __layers = {}\n\n    def __init__(self, center=(20, 0), zoom=2, height=\"600px\", **kwargs):\n        \"\"\"Create a LeafMap Map instance.\n\n        Params:\n            center (tuple): The center of the map (latitude, longitude)\n            zoom (int): The initial zoom level of the map\n            height (str): The height of the map\n            **kwargs: Additional keyword arguments\n\n        \"\"\"\n        super().__init__(center=center, zoom=zoom, scroll_wheel_zoom=True, **kwargs)\n        self.layout.height = height\n\n    def add_basemap(self, basemap=\"OpenTopoMap\"):\n        \"\"\"Add a basemap/layer to the map.\n\n        Params:\n            basemap (str): The name of the basemap/layer to add. Can be one of the following: 'OpenStreetMap.Mapnik', 'OpenStreetMap.BlackAndWhite', 'OpenStreetMap.DE', 'OpenStreetMap.France', 'OpenStreetMap.HOT', 'OpenStreetMap.Mapnik', 'OpenStreetMap.CH', 'OpenStreetMap.BZH', 'OpenStreetMap.Land', 'OpenStreetMap.HYB', 'OpenStreetMap.OSM\n\n        \"\"\"\n        try:\n            url = eval(f\"ipyleaflet.basemaps.{basemap}\").build_url()\n            layer = ipyleaflet.TileLayer(name=basemap, url=url)\n            self.__layers[basemap] = layer\n            self.add(item=layer)\n        except AttributeError:\n            logging.warning(f\"Basemap {basemap} not found. Using OpenTopoMap instead.\")\n            self.add(ipyleaflet.basemaps.OpenTopoMap)\n\n    def remove_basemap(self, basemap):\n        \"\"\"Remove a basemap/layer from the map.\n\n        Params:\n            basemap (str): The name of the basemap/layer to remove. Can be one of the following: 'OpenStreetMap.Mapnik', 'OpenStreetMap.BlackAndWhite', 'OpenStreetMap.DE', 'OpenStreetMap.France', 'OpenStreetMap.HOT', 'OpenStreetMap.Mapnik', 'OpenStreetMap.CH', 'OpenStreetMap.BZH', 'OpenStreetMap.Land', 'OpenStreetMap.HYB', 'OpenStreetMap.OSM\n\n        \"\"\"\n        try:\n            if basemap in self.__layers:\n                self.remove(self.__layers[basemap])\n                self.__layers.pop(basemap)\n            else:\n                logging.warning(f\"Basemap {basemap} not found.\")\n        except AttributeError:\n            logging.warning(f\"There was an error removing the basemap {basemap}.\")\n\n    def add_layer_control(self, position=\"topright\"):\n        \"\"\"Add a layer control to the map.\n\n        Params:\n            position (str): The position of the control (one of the map corners), can be 'topleft', 'topright', 'bottomleft' or 'bottomright'\n\n        \"\"\"\n        if position not in [\"topleft\", \"topright\", \"bottomleft\", \"bottomright\"]:\n            logging.warning(f\"Position {position} not valid. Using topright instead.\")\n            self.__layer_control = ipyleaflet.LayersControl(position=\"topright\")\n            self.add(self.__layer_control)\n        else:\n            self.__layer_control = ipyleaflet.LayersControl(position=position)\n            self.add(self.__layer_control)\n\n    def remove_layer_control(self):\n        \"\"\"Remove the layer control from the map.\"\"\"\n        try:\n            self.remove(self.__layer_control)\n            del self.__layer_control\n        except AttributeError:\n            logging.warning(f\"Layer control does not exist\")\n\n    def add_vector(self, name, url=None, geo_data=None, **kwargs):\n        \"\"\"Add a vector layer to the map.\n\n        Params:\n            name (str): The name of the vector layer\n            url (str, path object or file-like object): Either the absolute or relative path to the file or URL to be opened, or any object with a read() method (such as an open file or StringIO)\n            geo_data (geopandas.GeoDataFrame): A GeoDataFrame containing the vector data\n            style (dict): A dictionary of Leaflet Path options\n            hover_style (dict): A dictionary of Leaflet Path options\n            point_style (dict): A dictionary of Leaflet Path options\n\n        Examples:\n            ```python\n            m = LeafMap.Map()\n            m.add_vector(name='countries', url='https://ipyleaflet.readthedocs.io/en/latest/_downloads/countries.geo.json', style={'color': 'black', 'fillColor': '#3366cc', 'opacity':0.05, 'weight':1.9, 'dashArray':'2', 'fillOpacity':0.6}, hover_style={'fillColor': 'red' }, point_style={'radius': 5, 'color': 'red', 'fillOpacity': 0.8, 'fillColor': 'blue', 'weight': 3, 'type':'circle'})\n            ```\n        \"\"\"\n\n        if url is None and geo_data is None:\n            logging.warning(f\"Please provide either a URL or a GeoDataFrame.\")\n            return\n        if url is not None and geo_data is not None:\n            logging.warning(f\"Please provide only one of URL or GeoDataFrame.\")\n            return\n\n        if url is not None:\n            try:\n                gdf = gpd.read_file(url)\n                geo_data = ipyleaflet.GeoData(geo_dataframe=gdf, name=name, **kwargs)\n                self.__layers[name] = geo_data\n                self.add(geo_data)\n                return\n            except Exception as e:\n                logging.warning(f\"There was an error adding the vector layer: {e}\")\n        if geo_data is not None:\n            try:\n                geo_data = ipyleaflet.GeoData(\n                    geo_dataframe=geo_data, name=name, **kwargs\n                )\n                self.__layers[name] = geo_data\n                self.add(geo_data)\n                return\n            except Exception as e:\n                logging.warning(f\"There was an error adding the vector layer: {e}\")\n\n    def add_raster(self, url, name, colormap=None, opacity=1.0, **kwargs):\n        \"\"\"Add a raster layer to the map.\n\n        Params:\n            url (str): The URL of the raster layer\n            name (str): The name of the raster layer\n            colormap (str): The colormap to use for the raster layer\n            opacity (float): The opacity of the raster layer\n            **kwargs: Additional keyword arguments\n\n        Examples:\n            ```python\n            m = LeafMap.Map()\n            m.add_raster(url='https://example.com/raster.tif', name='raster', colormap='viridis', opacity=0.5)\n            ```\n        \"\"\"\n        from localtileserver import TileClient, get_leaflet_tile_layer\n\n        if url is None:\n            logging.warning(f\"Please provide a URL.\")\n            return\n\n        try:\n            client = TileClient(url)\n            raster_layer = get_leaflet_tile_layer(\n                client, name=name, colormap=colormap, opacity=opacity, **kwargs\n            )\n            self.__layers[name] = raster_layer\n            self.add(raster_layer)\n            self.center = client.center()\n            self.zoom = client.default_zoom\n        except Exception as e:\n            logging.warning(f\"There was an error adding the raster layer: {e}\")\n\n    def add_image(self, url, bounds=None, opacity=1.0, **kwargs):\n        \"\"\"Add an image layer to the map.\n\n        Params:\n            url (str): The URL of the image layer\n            bounds (tuple): The bounds of the image layer ((south, west), (north, east))\n            opacity (float): The opacity of the image layer\n            **kwargs: Additional keyword arguments\n\n        Examples:\n            ```python\n            m = LeafMap.Map()\n            m.add_image(url='https://example.com/image.png', bounds=((40, -100), (30, -90)), opacity=0.5)\n            ```\n        \"\"\"\n        if url is None:\n            logging.warning(f\"Please provide a URL.\")\n            return\n\n        if bounds is None:\n            bounds = ((-90, -180), (90, 180))\n\n        try:\n            image_layer = ipyleaflet.ImageOverlay(\n                url=url, bounds=bounds, opacity=opacity, **kwargs\n            )\n            self.add(image_layer)\n            self.fit_bounds(bounds)\n        except Exception as e:\n            logging.warning(f\"There was an error adding the image layer: {e}\")\n\n    def add_video(self, url, bounds=None, opacity=1.0, **kwargs):\n        \"\"\"Add a video layer to the map.\n\n        Params:\n            url (str): The URL of the video layer\n            bounds (tuple): The bounds of the video layer ((south, west), (north, east))\n            opacity (float): The opacity of the video layer\n            **kwargs: Additional keyword arguments\n\n        Examples:\n            ```python\n            m = LeafMap.Map()\n            m.add_video(url='https://example.com/video.mp4', bounds=((40, -100), (30, -90)), opacity=0.5)\n            ```\n        \"\"\"\n        if url is None:\n            logging.warning(f\"Please provide a URL.\")\n            return\n        if bounds is None:\n            bounds = ((13, -130), (32, -100))\n\n        try:\n            video_layer = ipyleaflet.VideoOverlay(\n                url=url, opacity=opacity, bounds=bounds, **kwargs\n            )\n            self.add(video_layer)\n            self.fit_bounds(bounds)\n        except Exception as e:\n            logging.warning(f\"There was an error adding the video layer: {e}\")\n\n    def add_wms_layer(\n        self, url, layers, name, format=\"image/png\", transparent=True, **kwargs\n    ):\n        \"\"\"Add a WMS layer to the map.\n\n        Params:\n            url (str): The URL of the WMS layer\n            layers (str): The layers of the WMS layer\n            name (str): The name of the WMS layer\n            format (str): The format of the WMS layer\n            transparent (bool): Whether the WMS layer is transparent\n            **kwargs: Additional keyword arguments\n\n        Examples:\n            ```python\n            m = LeafMap.Map()\n            m.add_wms_layer(url=\"https://ows.terrestris.de/osm/service\",\n                layers=\"OSM-WMS\",\n                name=\"WMS Layer\",\n                format=\"image/png\",\n                transparent=True,\n            )\n            ```\n        \"\"\"\n        if url is None:\n            logging.warning(f\"Please provide a URL.\")\n            return\n\n        try:\n            wms_layer = ipyleaflet.WMSLayer(\n                url=url,\n                layers=layers,\n                name=name,\n                format=format,\n                transparent=transparent,\n                **kwargs,\n            )\n            self.__layers[name] = wms_layer\n            self.add(wms_layer)\n        except Exception as e:\n            logging.warning(f\"There was an error adding the WMS layer: {e}\")\n</code></pre>"},{"location":"LeafMap/#cookiecutter_practice.LeafMap.Map.__init__","title":"<code>__init__(self, center=(20, 0), zoom=2, height='600px', **kwargs)</code>  <code>special</code>","text":"<p>Create a LeafMap Map instance.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>tuple</code> <p>The center of the map (latitude, longitude)</p> <code>(20, 0)</code> <code>zoom</code> <code>int</code> <p>The initial zoom level of the map</p> <code>2</code> <code>height</code> <code>str</code> <p>The height of the map</p> <code>'600px'</code> <code>**kwargs</code> <p>Additional keyword arguments</p> <code>{}</code> Source code in <code>cookiecutter_practice/LeafMap.py</code> <pre><code>def __init__(self, center=(20, 0), zoom=2, height=\"600px\", **kwargs):\n    \"\"\"Create a LeafMap Map instance.\n\n    Params:\n        center (tuple): The center of the map (latitude, longitude)\n        zoom (int): The initial zoom level of the map\n        height (str): The height of the map\n        **kwargs: Additional keyword arguments\n\n    \"\"\"\n    super().__init__(center=center, zoom=zoom, scroll_wheel_zoom=True, **kwargs)\n    self.layout.height = height\n</code></pre>"},{"location":"LeafMap/#cookiecutter_practice.LeafMap.Map.add_basemap","title":"<code>add_basemap(self, basemap='OpenTopoMap')</code>","text":"<p>Add a basemap/layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>basemap</code> <code>str</code> <p>The name of the basemap/layer to add. Can be one of the following: 'OpenStreetMap.Mapnik', 'OpenStreetMap.BlackAndWhite', 'OpenStreetMap.DE', 'OpenStreetMap.France', 'OpenStreetMap.HOT', 'OpenStreetMap.Mapnik', 'OpenStreetMap.CH', 'OpenStreetMap.BZH', 'OpenStreetMap.Land', 'OpenStreetMap.HYB', 'OpenStreetMap.OSM</p> <code>'OpenTopoMap'</code> Source code in <code>cookiecutter_practice/LeafMap.py</code> <pre><code>def add_basemap(self, basemap=\"OpenTopoMap\"):\n    \"\"\"Add a basemap/layer to the map.\n\n    Params:\n        basemap (str): The name of the basemap/layer to add. Can be one of the following: 'OpenStreetMap.Mapnik', 'OpenStreetMap.BlackAndWhite', 'OpenStreetMap.DE', 'OpenStreetMap.France', 'OpenStreetMap.HOT', 'OpenStreetMap.Mapnik', 'OpenStreetMap.CH', 'OpenStreetMap.BZH', 'OpenStreetMap.Land', 'OpenStreetMap.HYB', 'OpenStreetMap.OSM\n\n    \"\"\"\n    try:\n        url = eval(f\"ipyleaflet.basemaps.{basemap}\").build_url()\n        layer = ipyleaflet.TileLayer(name=basemap, url=url)\n        self.__layers[basemap] = layer\n        self.add(item=layer)\n    except AttributeError:\n        logging.warning(f\"Basemap {basemap} not found. Using OpenTopoMap instead.\")\n        self.add(ipyleaflet.basemaps.OpenTopoMap)\n</code></pre>"},{"location":"LeafMap/#cookiecutter_practice.LeafMap.Map.add_image","title":"<code>add_image(self, url, bounds=None, opacity=1.0, **kwargs)</code>","text":"<p>Add an image layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the image layer</p> required <code>bounds</code> <code>tuple</code> <p>The bounds of the image layer ((south, west), (north, east))</p> <code>None</code> <code>opacity</code> <code>float</code> <p>The opacity of the image layer</p> <code>1.0</code> <code>**kwargs</code> <p>Additional keyword arguments</p> <code>{}</code> <p>Examples:</p> <pre><code>m = LeafMap.Map()\nm.add_image(url='https://example.com/image.png', bounds=((40, -100), (30, -90)), opacity=0.5)\n</code></pre> Source code in <code>cookiecutter_practice/LeafMap.py</code> <pre><code>def add_image(self, url, bounds=None, opacity=1.0, **kwargs):\n    \"\"\"Add an image layer to the map.\n\n    Params:\n        url (str): The URL of the image layer\n        bounds (tuple): The bounds of the image layer ((south, west), (north, east))\n        opacity (float): The opacity of the image layer\n        **kwargs: Additional keyword arguments\n\n    Examples:\n        ```python\n        m = LeafMap.Map()\n        m.add_image(url='https://example.com/image.png', bounds=((40, -100), (30, -90)), opacity=0.5)\n        ```\n    \"\"\"\n    if url is None:\n        logging.warning(f\"Please provide a URL.\")\n        return\n\n    if bounds is None:\n        bounds = ((-90, -180), (90, 180))\n\n    try:\n        image_layer = ipyleaflet.ImageOverlay(\n            url=url, bounds=bounds, opacity=opacity, **kwargs\n        )\n        self.add(image_layer)\n        self.fit_bounds(bounds)\n    except Exception as e:\n        logging.warning(f\"There was an error adding the image layer: {e}\")\n</code></pre>"},{"location":"LeafMap/#cookiecutter_practice.LeafMap.Map.add_layer_control","title":"<code>add_layer_control(self, position='topright')</code>","text":"<p>Add a layer control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the control (one of the map corners), can be 'topleft', 'topright', 'bottomleft' or 'bottomright'</p> <code>'topright'</code> Source code in <code>cookiecutter_practice/LeafMap.py</code> <pre><code>def add_layer_control(self, position=\"topright\"):\n    \"\"\"Add a layer control to the map.\n\n    Params:\n        position (str): The position of the control (one of the map corners), can be 'topleft', 'topright', 'bottomleft' or 'bottomright'\n\n    \"\"\"\n    if position not in [\"topleft\", \"topright\", \"bottomleft\", \"bottomright\"]:\n        logging.warning(f\"Position {position} not valid. Using topright instead.\")\n        self.__layer_control = ipyleaflet.LayersControl(position=\"topright\")\n        self.add(self.__layer_control)\n    else:\n        self.__layer_control = ipyleaflet.LayersControl(position=position)\n        self.add(self.__layer_control)\n</code></pre>"},{"location":"LeafMap/#cookiecutter_practice.LeafMap.Map.add_raster","title":"<code>add_raster(self, url, name, colormap=None, opacity=1.0, **kwargs)</code>","text":"<p>Add a raster layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the raster layer</p> required <code>name</code> <code>str</code> <p>The name of the raster layer</p> required <code>colormap</code> <code>str</code> <p>The colormap to use for the raster layer</p> <code>None</code> <code>opacity</code> <code>float</code> <p>The opacity of the raster layer</p> <code>1.0</code> <code>**kwargs</code> <p>Additional keyword arguments</p> <code>{}</code> <p>Examples:</p> <pre><code>m = LeafMap.Map()\nm.add_raster(url='https://example.com/raster.tif', name='raster', colormap='viridis', opacity=0.5)\n</code></pre> Source code in <code>cookiecutter_practice/LeafMap.py</code> <pre><code>def add_raster(self, url, name, colormap=None, opacity=1.0, **kwargs):\n    \"\"\"Add a raster layer to the map.\n\n    Params:\n        url (str): The URL of the raster layer\n        name (str): The name of the raster layer\n        colormap (str): The colormap to use for the raster layer\n        opacity (float): The opacity of the raster layer\n        **kwargs: Additional keyword arguments\n\n    Examples:\n        ```python\n        m = LeafMap.Map()\n        m.add_raster(url='https://example.com/raster.tif', name='raster', colormap='viridis', opacity=0.5)\n        ```\n    \"\"\"\n    from localtileserver import TileClient, get_leaflet_tile_layer\n\n    if url is None:\n        logging.warning(f\"Please provide a URL.\")\n        return\n\n    try:\n        client = TileClient(url)\n        raster_layer = get_leaflet_tile_layer(\n            client, name=name, colormap=colormap, opacity=opacity, **kwargs\n        )\n        self.__layers[name] = raster_layer\n        self.add(raster_layer)\n        self.center = client.center()\n        self.zoom = client.default_zoom\n    except Exception as e:\n        logging.warning(f\"There was an error adding the raster layer: {e}\")\n</code></pre>"},{"location":"LeafMap/#cookiecutter_practice.LeafMap.Map.add_vector","title":"<code>add_vector(self, name, url=None, geo_data=None, **kwargs)</code>","text":"<p>Add a vector layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the vector layer</p> required <code>url</code> <code>str, path object or file-like object</code> <p>Either the absolute or relative path to the file or URL to be opened, or any object with a read() method (such as an open file or StringIO)</p> <code>None</code> <code>geo_data</code> <code>geopandas.GeoDataFrame</code> <p>A GeoDataFrame containing the vector data</p> <code>None</code> <code>style</code> <code>dict</code> <p>A dictionary of Leaflet Path options</p> required <code>hover_style</code> <code>dict</code> <p>A dictionary of Leaflet Path options</p> required <code>point_style</code> <code>dict</code> <p>A dictionary of Leaflet Path options</p> required <p>Examples:</p> <pre><code>m = LeafMap.Map()\nm.add_vector(name='countries', url='https://ipyleaflet.readthedocs.io/en/latest/_downloads/countries.geo.json', style={'color': 'black', 'fillColor': '#3366cc', 'opacity':0.05, 'weight':1.9, 'dashArray':'2', 'fillOpacity':0.6}, hover_style={'fillColor': 'red' }, point_style={'radius': 5, 'color': 'red', 'fillOpacity': 0.8, 'fillColor': 'blue', 'weight': 3, 'type':'circle'})\n</code></pre> Source code in <code>cookiecutter_practice/LeafMap.py</code> <pre><code>def add_vector(self, name, url=None, geo_data=None, **kwargs):\n    \"\"\"Add a vector layer to the map.\n\n    Params:\n        name (str): The name of the vector layer\n        url (str, path object or file-like object): Either the absolute or relative path to the file or URL to be opened, or any object with a read() method (such as an open file or StringIO)\n        geo_data (geopandas.GeoDataFrame): A GeoDataFrame containing the vector data\n        style (dict): A dictionary of Leaflet Path options\n        hover_style (dict): A dictionary of Leaflet Path options\n        point_style (dict): A dictionary of Leaflet Path options\n\n    Examples:\n        ```python\n        m = LeafMap.Map()\n        m.add_vector(name='countries', url='https://ipyleaflet.readthedocs.io/en/latest/_downloads/countries.geo.json', style={'color': 'black', 'fillColor': '#3366cc', 'opacity':0.05, 'weight':1.9, 'dashArray':'2', 'fillOpacity':0.6}, hover_style={'fillColor': 'red' }, point_style={'radius': 5, 'color': 'red', 'fillOpacity': 0.8, 'fillColor': 'blue', 'weight': 3, 'type':'circle'})\n        ```\n    \"\"\"\n\n    if url is None and geo_data is None:\n        logging.warning(f\"Please provide either a URL or a GeoDataFrame.\")\n        return\n    if url is not None and geo_data is not None:\n        logging.warning(f\"Please provide only one of URL or GeoDataFrame.\")\n        return\n\n    if url is not None:\n        try:\n            gdf = gpd.read_file(url)\n            geo_data = ipyleaflet.GeoData(geo_dataframe=gdf, name=name, **kwargs)\n            self.__layers[name] = geo_data\n            self.add(geo_data)\n            return\n        except Exception as e:\n            logging.warning(f\"There was an error adding the vector layer: {e}\")\n    if geo_data is not None:\n        try:\n            geo_data = ipyleaflet.GeoData(\n                geo_dataframe=geo_data, name=name, **kwargs\n            )\n            self.__layers[name] = geo_data\n            self.add(geo_data)\n            return\n        except Exception as e:\n            logging.warning(f\"There was an error adding the vector layer: {e}\")\n</code></pre>"},{"location":"LeafMap/#cookiecutter_practice.LeafMap.Map.add_video","title":"<code>add_video(self, url, bounds=None, opacity=1.0, **kwargs)</code>","text":"<p>Add a video layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the video layer</p> required <code>bounds</code> <code>tuple</code> <p>The bounds of the video layer ((south, west), (north, east))</p> <code>None</code> <code>opacity</code> <code>float</code> <p>The opacity of the video layer</p> <code>1.0</code> <code>**kwargs</code> <p>Additional keyword arguments</p> <code>{}</code> <p>Examples:</p> <pre><code>m = LeafMap.Map()\nm.add_video(url='https://example.com/video.mp4', bounds=((40, -100), (30, -90)), opacity=0.5)\n</code></pre> Source code in <code>cookiecutter_practice/LeafMap.py</code> <pre><code>def add_video(self, url, bounds=None, opacity=1.0, **kwargs):\n    \"\"\"Add a video layer to the map.\n\n    Params:\n        url (str): The URL of the video layer\n        bounds (tuple): The bounds of the video layer ((south, west), (north, east))\n        opacity (float): The opacity of the video layer\n        **kwargs: Additional keyword arguments\n\n    Examples:\n        ```python\n        m = LeafMap.Map()\n        m.add_video(url='https://example.com/video.mp4', bounds=((40, -100), (30, -90)), opacity=0.5)\n        ```\n    \"\"\"\n    if url is None:\n        logging.warning(f\"Please provide a URL.\")\n        return\n    if bounds is None:\n        bounds = ((13, -130), (32, -100))\n\n    try:\n        video_layer = ipyleaflet.VideoOverlay(\n            url=url, opacity=opacity, bounds=bounds, **kwargs\n        )\n        self.add(video_layer)\n        self.fit_bounds(bounds)\n    except Exception as e:\n        logging.warning(f\"There was an error adding the video layer: {e}\")\n</code></pre>"},{"location":"LeafMap/#cookiecutter_practice.LeafMap.Map.add_wms_layer","title":"<code>add_wms_layer(self, url, layers, name, format='image/png', transparent=True, **kwargs)</code>","text":"<p>Add a WMS layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the WMS layer</p> required <code>layers</code> <code>str</code> <p>The layers of the WMS layer</p> required <code>name</code> <code>str</code> <p>The name of the WMS layer</p> required <code>format</code> <code>str</code> <p>The format of the WMS layer</p> <code>'image/png'</code> <code>transparent</code> <code>bool</code> <p>Whether the WMS layer is transparent</p> <code>True</code> <code>**kwargs</code> <p>Additional keyword arguments</p> <code>{}</code> <p>Examples:</p> <pre><code>m = LeafMap.Map()\nm.add_wms_layer(url=\"https://ows.terrestris.de/osm/service\",\n    layers=\"OSM-WMS\",\n    name=\"WMS Layer\",\n    format=\"image/png\",\n    transparent=True,\n)\n</code></pre> Source code in <code>cookiecutter_practice/LeafMap.py</code> <pre><code>def add_wms_layer(\n    self, url, layers, name, format=\"image/png\", transparent=True, **kwargs\n):\n    \"\"\"Add a WMS layer to the map.\n\n    Params:\n        url (str): The URL of the WMS layer\n        layers (str): The layers of the WMS layer\n        name (str): The name of the WMS layer\n        format (str): The format of the WMS layer\n        transparent (bool): Whether the WMS layer is transparent\n        **kwargs: Additional keyword arguments\n\n    Examples:\n        ```python\n        m = LeafMap.Map()\n        m.add_wms_layer(url=\"https://ows.terrestris.de/osm/service\",\n            layers=\"OSM-WMS\",\n            name=\"WMS Layer\",\n            format=\"image/png\",\n            transparent=True,\n        )\n        ```\n    \"\"\"\n    if url is None:\n        logging.warning(f\"Please provide a URL.\")\n        return\n\n    try:\n        wms_layer = ipyleaflet.WMSLayer(\n            url=url,\n            layers=layers,\n            name=name,\n            format=format,\n            transparent=transparent,\n            **kwargs,\n        )\n        self.__layers[name] = wms_layer\n        self.add(wms_layer)\n    except Exception as e:\n        logging.warning(f\"There was an error adding the WMS layer: {e}\")\n</code></pre>"},{"location":"LeafMap/#cookiecutter_practice.LeafMap.Map.remove_basemap","title":"<code>remove_basemap(self, basemap)</code>","text":"<p>Remove a basemap/layer from the map.</p> <p>Parameters:</p> Name Type Description Default <code>basemap</code> <code>str</code> <p>The name of the basemap/layer to remove. Can be one of the following: 'OpenStreetMap.Mapnik', 'OpenStreetMap.BlackAndWhite', 'OpenStreetMap.DE', 'OpenStreetMap.France', 'OpenStreetMap.HOT', 'OpenStreetMap.Mapnik', 'OpenStreetMap.CH', 'OpenStreetMap.BZH', 'OpenStreetMap.Land', 'OpenStreetMap.HYB', 'OpenStreetMap.OSM</p> required Source code in <code>cookiecutter_practice/LeafMap.py</code> <pre><code>def remove_basemap(self, basemap):\n    \"\"\"Remove a basemap/layer from the map.\n\n    Params:\n        basemap (str): The name of the basemap/layer to remove. Can be one of the following: 'OpenStreetMap.Mapnik', 'OpenStreetMap.BlackAndWhite', 'OpenStreetMap.DE', 'OpenStreetMap.France', 'OpenStreetMap.HOT', 'OpenStreetMap.Mapnik', 'OpenStreetMap.CH', 'OpenStreetMap.BZH', 'OpenStreetMap.Land', 'OpenStreetMap.HYB', 'OpenStreetMap.OSM\n\n    \"\"\"\n    try:\n        if basemap in self.__layers:\n            self.remove(self.__layers[basemap])\n            self.__layers.pop(basemap)\n        else:\n            logging.warning(f\"Basemap {basemap} not found.\")\n    except AttributeError:\n        logging.warning(f\"There was an error removing the basemap {basemap}.\")\n</code></pre>"},{"location":"LeafMap/#cookiecutter_practice.LeafMap.Map.remove_layer_control","title":"<code>remove_layer_control(self)</code>","text":"<p>Remove the layer control from the map.</p> Source code in <code>cookiecutter_practice/LeafMap.py</code> <pre><code>def remove_layer_control(self):\n    \"\"\"Remove the layer control from the map.\"\"\"\n    try:\n        self.remove(self.__layer_control)\n        del self.__layer_control\n    except AttributeError:\n        logging.warning(f\"Layer control does not exist\")\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#cookiecutter_practice.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>cookiecutter_practice/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/marts-dev/cookiecutter-practice/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>CookieCutter Practice could always use more documentation, whether as part of the official CookieCutter Practice docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/marts-dev/cookiecutter-practice/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up cookiecutter-practice for local development.</p> <ol> <li> <p>Fork the cookiecutter-practice repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/cookiecutter-practice.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv cookiecutter-practice\n$ cd cookiecutter-practice/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 cookiecutter-practice tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/marts-dev/cookiecutter-practice/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"cookiecutter_practice/","title":"cookiecutter_practice module","text":"<p>Main module.</p>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#1-what-is-this-package-for","title":"1. What is this package for?","text":"<p>This package was built as an exercise for geog-510 Lab 3 Exercise.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install CookieCutter Practice, run this command in your terminal:</p> <pre><code>pip install cookiecutter-practice\n</code></pre> <p>This is the preferred method to install CookieCutter Practice, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install CookieCutter Practice from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/marts-dev/cookiecutter-practice\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use CookieCutter Practice in a project:</p> <p><pre><code>import cookiecutter_practice\n</code></pre> or <pre><code>from cookiecutter_practice import LeafMap\nfrom cookiecutter_practice import FoliumMap\n</code></pre></p>"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>from cookiecutter_practice import LeafMap\n</pre> from cookiecutter_practice import LeafMap In\u00a0[2]: Copied! <pre>m = LeafMap.Map(center=(40, -100), zoom=4, height='300px')\n</pre> m = LeafMap.Map(center=(40, -100), zoom=4, height='300px') In\u00a0[3]: Copied! <pre>m\n</pre> m Out[3]: In\u00a0[4]: Copied! <pre>m.add_basemap(basemap='OpenTopoMap')\n</pre> m.add_basemap(basemap='OpenTopoMap') In\u00a0[5]: Copied! <pre>m.add_layer_control()\n</pre> m.add_layer_control() In\u00a0[6]: Copied! <pre># Uncomment the following line to remove the layer control\n#m.remove_layer_control()\n</pre> # Uncomment the following line to remove the layer control #m.remove_layer_control() In\u00a0[7]: Copied! <pre>url = \"https://github.com/opengeos/datasets/releases/download/places/las_vegas_buildings.geojson\"\nm.add_vector(name=\"Las Vegas Buildings\", url=url)\n</pre> url = \"https://github.com/opengeos/datasets/releases/download/places/las_vegas_buildings.geojson\" m.add_vector(name=\"Las Vegas Buildings\", url=url) In\u00a0[8]: Copied! <pre>m.center = (36.1, -115.2)\nm.zoom = 12\n</pre> m.center = (36.1, -115.2) m.zoom = 12 In\u00a0[9]: Copied! <pre>m\n</pre> m Out[9]: <p>You may also pass GeoDataFrame</p> In\u00a0[10]: Copied! <pre>import pandas as pd, numpy as np\nimport geopandas as gpd\n\nnumpoints = 10\ncenter = (46.91, 7.43)\n\ndf = pd.DataFrame(\n    {'Conc': 1 * np.random.randn(numpoints) + 17,\n     'Longitude': 0.0004 * np.random.randn(numpoints) + center[1],\n     'Latitude': 0.0004 * np.random.randn(numpoints) + center[0]})\n\ngdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n</pre> import pandas as pd, numpy as np import geopandas as gpd  numpoints = 10 center = (46.91, 7.43)  df = pd.DataFrame(     {'Conc': 1 * np.random.randn(numpoints) + 17,      'Longitude': 0.0004 * np.random.randn(numpoints) + center[1],      'Latitude': 0.0004 * np.random.randn(numpoints) + center[0]})  gdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude)) In\u00a0[11]: Copied! <pre>m.add_vector(\n    name=\"Release\",\n    geo_data=gdf,\n    style={'color': 'black', 'radius':8, 'fillColor': '#3366cc', 'opacity':0.5, 'weight':1.9, 'dashArray':'2', 'fillOpacity':0.6},\n    hover_style={'fillColor': 'red' , 'fillOpacity': 0.2},\n    point_style={'radius': 5, 'color': 'red', 'fillOpacity': 0.8, 'fillColor': 'blue', 'weight': 3, 'type':'circle'}\n    )\n</pre> m.add_vector(     name=\"Release\",     geo_data=gdf,     style={'color': 'black', 'radius':8, 'fillColor': '#3366cc', 'opacity':0.5, 'weight':1.9, 'dashArray':'2', 'fillOpacity':0.6},     hover_style={'fillColor': 'red' , 'fillOpacity': 0.2},     point_style={'radius': 5, 'color': 'red', 'fillOpacity': 0.8, 'fillColor': 'blue', 'weight': 3, 'type':'circle'}     ) In\u00a0[12]: Copied! <pre>m.center = center\nm.zoom = 12\nm\n</pre> m.center = center m.zoom = 12 m Out[12]: In\u00a0[13]: Copied! <pre>from cookiecutter_practice import FoliumMap\n</pre> from cookiecutter_practice import FoliumMap In\u00a0[14]: Copied! <pre>f = FoliumMap.Map(cebter=[40.75, -73.95], zoom=12, height='100%')\n</pre> f = FoliumMap.Map(cebter=[40.75, -73.95], zoom=12, height='100%') In\u00a0[15]: Copied! <pre>f.add_basemap('CartoDB positron')\n</pre> f.add_basemap('CartoDB positron') In\u00a0[16]: Copied! <pre>f.add_vector(name=\"Map1\", url='https://raw.githubusercontent.com/python-visualization/folium-example-data/main/new_york_boroughs.zip', style={'color': 'black', 'fillColor': 'blue', 'opacity':0.05, 'weight':1.9, 'dashArray':'2', 'fillOpacity':0.6})\n</pre> f.add_vector(name=\"Map1\", url='https://raw.githubusercontent.com/python-visualization/folium-example-data/main/new_york_boroughs.zip', style={'color': 'black', 'fillColor': 'blue', 'opacity':0.05, 'weight':1.9, 'dashArray':'2', 'fillOpacity':0.6}) <p>You may also pass GeoDataFrame</p> In\u00a0[17]: Copied! <pre>import geopandas\ngdf = geopandas.read_file(\n    \"https://raw.githubusercontent.com/python-visualization/folium-example-data/main/subway_stations.geojson\"\n)\ngdf['href'] = '&lt;a href=\"' + gdf.url + '\"&gt;' + gdf.url + \"&lt;/a&gt;\"\ngdf['service_level'] = gdf.notes.str.split(', ').apply(lambda x: len([v for v in x if \"all\" in v]))\ngdf['lines_served'] = gdf.line.str.split('-').apply(lambda x: len(x))\n\ncolors = [\"orange\", \"yellow\", \"green\", \"blue\"]\n</pre> import geopandas gdf = geopandas.read_file(     \"https://raw.githubusercontent.com/python-visualization/folium-example-data/main/subway_stations.geojson\" ) gdf['href'] = '' + gdf.url + \"\" gdf['service_level'] = gdf.notes.str.split(', ').apply(lambda x: len([v for v in x if \"all\" in v])) gdf['lines_served'] = gdf.line.str.split('-').apply(lambda x: len(x))  colors = [\"orange\", \"yellow\", \"green\", \"blue\"] In\u00a0[18]: Copied! <pre>import folium\nf.add_vector(name=\"Map2\", geo_data=gdf, \n    marker=folium.Circle(radius=4, fill_color=\"orange\", fill_opacity=0.4, color=\"black\", weight=1),\n    tooltip=folium.GeoJsonTooltip(fields=[\"name\", \"line\", \"notes\"]),\n    style=lambda x: {\n        \"fillColor\": colors[x['properties']['service_level']],\n        \"radius\": (x['properties']['lines_served'])*30,\n    },\n    highlight_style=lambda x: {\"fillOpacity\": 0.8},\n    zoom_on_click=True\n)\n</pre> import folium f.add_vector(name=\"Map2\", geo_data=gdf,      marker=folium.Circle(radius=4, fill_color=\"orange\", fill_opacity=0.4, color=\"black\", weight=1),     tooltip=folium.GeoJsonTooltip(fields=[\"name\", \"line\", \"notes\"]),     style=lambda x: {         \"fillColor\": colors[x['properties']['service_level']],         \"radius\": (x['properties']['lines_served'])*30,     },     highlight_style=lambda x: {\"fillOpacity\": 0.8},     zoom_on_click=True ) In\u00a0[19]: Copied! <pre>f.add_layer_control('topright')\n</pre> f.add_layer_control('topright') In\u00a0[20]: Copied! <pre>f\n</pre> f Out[20]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/intro/#getting-started","title":"Getting Started\u00b6","text":"<p>This notebook will show you examples on how to use the module.</p>"},{"location":"examples/intro/#using-the-leafmap-module","title":"Using the <code>LeafMap</code> module\u00b6","text":""},{"location":"examples/intro/#loading-the-module","title":"Loading the module\u00b6","text":""},{"location":"examples/intro/#creating-a-leafmap-map-instance","title":"Creating a LeafMap Map instance\u00b6","text":""},{"location":"examples/intro/#adding-a-new-basemap","title":"Adding a new basemap\u00b6","text":""},{"location":"examples/intro/#adding-layer-control","title":"Adding layer control\u00b6","text":"<p>Adds a widget for controlling the map layers.</p>"},{"location":"examples/intro/#removing-layer-control","title":"Removing layer control\u00b6","text":""},{"location":"examples/intro/#adding-a-vector-layer","title":"Adding a vector layer\u00b6","text":"<p>You may pass a URL to a GeoJSON data.</p>"},{"location":"examples/intro/#using-the-foliummap-module","title":"Using the <code>FoliumMap</code> module\u00b6","text":""},{"location":"examples/intro/#loading-the-module","title":"Loading the module\u00b6","text":""},{"location":"examples/intro/#creating-a-foliummap-map-instance","title":"Creating a FoliumMap Map instance\u00b6","text":""},{"location":"examples/intro/#adding-a-new-basemap","title":"Adding a new basemap\u00b6","text":""},{"location":"examples/intro/#adding-a-vector-layer","title":"Adding a vector layer\u00b6","text":"<p>You may pass a URL to a GeoJSON data.</p>"},{"location":"examples/intro/#adding-layer-control","title":"Adding layer control\u00b6","text":"<p>Adds a widget for controlling the map layers.</p> <p>Note: Add this only after adding all the other layers, unexpected behavior may occur.</p>"},{"location":"examples/rasterdata/","title":"Rasterdata","text":"In\u00a0[1]: Copied! <pre>from cookiecutter_practice import LeafMap\n</pre> from cookiecutter_practice import LeafMap In\u00a0[2]: Copied! <pre>lf = LeafMap.Map(zoom=5)\nraster_path = (\"https://storage.googleapis.com/philsa-space-data-dashboard/LandCoverAndLandUse/2022_LandCover_4326_new.tif\")\nlf.add_raster(\n  raster_path,\n  name=\"Land Cover and Land Use\",\n  opacity=0.8,\n  attribution=\"\u00a9 PhilSA | CC BY 4.0 | https://philsa.gov.ph/philippine-space-data-dashboard/\",\n)\nlf.add_layer_control()\nlf\n</pre> lf = LeafMap.Map(zoom=5) raster_path = (\"https://storage.googleapis.com/philsa-space-data-dashboard/LandCoverAndLandUse/2022_LandCover_4326_new.tif\") lf.add_raster(   raster_path,   name=\"Land Cover and Land Use\",   opacity=0.8,   attribution=\"\u00a9 PhilSA | CC BY 4.0 | https://philsa.gov.ph/philippine-space-data-dashboard/\", ) lf.add_layer_control() lf Out[2]: In\u00a0[3]: Copied! <pre>import rasterio\nimg_tiff = \"https://storage.googleapis.com/dpad-bucket/D2/smi/D2_SMI_2020-03-22T053207_2020-03-22T235959_L1C_COG.tif\"\n# This will be used for retrieving the metadata of the image(e.g. Bounds)\nimg_raster = rasterio.open(img_tiff)\nlf = LeafMap.Map(zoom=5)\nlf.add_image(\"https://storage.googleapis.com/dpad-bucket/D2/thumbnail/D2_SMI_2020-03-22T053207_2020-03-22T235959_THUMB.png\", bounds=((img_raster.bounds[1],img_raster.bounds[0]), (img_raster.bounds[3],img_raster.bounds[2])), name=\"SMI\")\nlf.add_layer_control()\nlf\n</pre> import rasterio img_tiff = \"https://storage.googleapis.com/dpad-bucket/D2/smi/D2_SMI_2020-03-22T053207_2020-03-22T235959_L1C_COG.tif\" # This will be used for retrieving the metadata of the image(e.g. Bounds) img_raster = rasterio.open(img_tiff) lf = LeafMap.Map(zoom=5) lf.add_image(\"https://storage.googleapis.com/dpad-bucket/D2/thumbnail/D2_SMI_2020-03-22T053207_2020-03-22T235959_THUMB.png\", bounds=((img_raster.bounds[1],img_raster.bounds[0]), (img_raster.bounds[3],img_raster.bounds[2])), name=\"SMI\") lf.add_layer_control() lf Out[3]: In\u00a0[4]: Copied! <pre>lf = LeafMap.Map(zoom=5)\nlf.add_video(\n  url=\"https://data.opengeos.org/patricia_nasa.mp4\",\n  name=\"Patricia NASA Video\",\n  bounds=((13, -130), (32, -100)),\n  autoplay=True,\n  loop=True\n)\n# Note: Video may not be visible when running the notebook in VSCode\nlf.add_layer_control()\nlf\n</pre> lf = LeafMap.Map(zoom=5) lf.add_video(   url=\"https://data.opengeos.org/patricia_nasa.mp4\",   name=\"Patricia NASA Video\",   bounds=((13, -130), (32, -100)),   autoplay=True,   loop=True ) # Note: Video may not be visible when running the notebook in VSCode lf.add_layer_control() lf Out[4]: In\u00a0[5]: Copied! <pre>lf = LeafMap.Map(zoom=2)\nlf.add_wms_layer(\n  url=\"https://ows.terrestris.de/osm/service\",\n  layers=\"OSM-WMS\",\n  name=\"WMS Layer\",\n  format=\"image/png\",\n  transparent=True,\n)\nlf.add_layer_control()\nlf\n</pre> lf = LeafMap.Map(zoom=2) lf.add_wms_layer(   url=\"https://ows.terrestris.de/osm/service\",   layers=\"OSM-WMS\",   name=\"WMS Layer\",   format=\"image/png\",   transparent=True, ) lf.add_layer_control() lf Out[5]: In\u00a0[6]: Copied! <pre>from cookiecutter_practice import FoliumMap\n</pre> from cookiecutter_practice import FoliumMap In\u00a0[7]: Copied! <pre>fm = FoliumMap.Map(zoom=5)\nraster_path = (\"https://storage.googleapis.com/philsa-space-data-dashboard/LandCoverAndLandUse/2022_LandCover_4326_new.tif\")\nfm.add_raster(raster_path, name=\"Land Cover and Land Use\", opacity=0.8)\nfm.add_layer_control()\nfm\n</pre> fm = FoliumMap.Map(zoom=5) raster_path = (\"https://storage.googleapis.com/philsa-space-data-dashboard/LandCoverAndLandUse/2022_LandCover_4326_new.tif\") fm.add_raster(raster_path, name=\"Land Cover and Land Use\", opacity=0.8) fm.add_layer_control() fm Out[7]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[8]: Copied! <pre>import rasterio\nimg_tiff = \"https://storage.googleapis.com/dpad-bucket/D2/smi/D2_SMI_2020-03-22T053207_2020-03-22T235959_L1C_COG.tif\"\n# This will be used for retrieving the metadata of the image(e.g. Bounds)\nimg_raster = rasterio.open(img_tiff)\nfm = FoliumMap.Map(zoom=5)\nfm.add_image(\"https://storage.googleapis.com/dpad-bucket/D2/thumbnail/D2_SMI_2020-03-22T053207_2020-03-22T235959_THUMB.png\", bounds=((img_raster.bounds[1],img_raster.bounds[0]), (img_raster.bounds[3],img_raster.bounds[2])), name=\"SMI\")\nfm.add_layer_control()\nfm\n</pre> import rasterio img_tiff = \"https://storage.googleapis.com/dpad-bucket/D2/smi/D2_SMI_2020-03-22T053207_2020-03-22T235959_L1C_COG.tif\" # This will be used for retrieving the metadata of the image(e.g. Bounds) img_raster = rasterio.open(img_tiff) fm = FoliumMap.Map(zoom=5) fm.add_image(\"https://storage.googleapis.com/dpad-bucket/D2/thumbnail/D2_SMI_2020-03-22T053207_2020-03-22T235959_THUMB.png\", bounds=((img_raster.bounds[1],img_raster.bounds[0]), (img_raster.bounds[3],img_raster.bounds[2])), name=\"SMI\") fm.add_layer_control() fm Out[8]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[9]: Copied! <pre>fm = FoliumMap.Map(zoom=5)\nfm.add_video(url=\"https://data.opengeos.org/patricia_nasa.mp4\", name=\"Patricia NASA Video\", bounds=((13, -130), (32, -100)), autoplay=True, loop=True, opacity=0.8)\nfm.add_layer_control()\nfm\n</pre> fm = FoliumMap.Map(zoom=5) fm.add_video(url=\"https://data.opengeos.org/patricia_nasa.mp4\", name=\"Patricia NASA Video\", bounds=((13, -130), (32, -100)), autoplay=True, loop=True, opacity=0.8) fm.add_layer_control() fm Out[9]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[10]: Copied! <pre>fm = FoliumMap.Map(zoom=2)\nfm.add_wms_layer(url=\"https://ows.terrestris.de/osm/service\", layers=\"OSM-WMS\", name=\"WMS Layer\", format=\"image/png\", transparent=True)\nfm.add_layer_control()\nfm\n</pre> fm = FoliumMap.Map(zoom=2) fm.add_wms_layer(url=\"https://ows.terrestris.de/osm/service\", layers=\"OSM-WMS\", name=\"WMS Layer\", format=\"image/png\", transparent=True) fm.add_layer_control() fm Out[10]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook"},{"location":"examples/rasterdata/#raster-data-visualization","title":"Raster Data Visualization\u00b6","text":"<p>This notebook will show you examples on how to display Raster data, images, videos and WMS data.</p>"},{"location":"examples/rasterdata/#leafmap","title":"LeafMap\u00b6","text":"<p>This section will show how to use the LeafMap module.</p>"},{"location":"examples/rasterdata/#requirement","title":"Requirement\u00b6","text":"<p>Load the LeafMap module.</p>"},{"location":"examples/rasterdata/#displaying-a-raster-data-layer","title":"Displaying a Raster Data Layer\u00b6","text":""},{"location":"examples/rasterdata/#displaying-an-image-layer","title":"Displaying an Image Layer\u00b6","text":""},{"location":"examples/rasterdata/#displaying-a-video-layer","title":"Displaying a Video Layer\u00b6","text":""},{"location":"examples/rasterdata/#displaying-a-wms-layer","title":"Displaying a WMS Layer\u00b6","text":""},{"location":"examples/rasterdata/#foliummap","title":"FoliumMap\u00b6","text":"<p>This section will show how to use the FoliumMap module.</p>"},{"location":"examples/rasterdata/#requirement","title":"Requirement\u00b6","text":"<p>Load the FoliumMap module.</p>"},{"location":"examples/rasterdata/#displaying-a-raster-data-layer","title":"Displaying a Raster Data Layer\u00b6","text":""},{"location":"examples/rasterdata/#displaying-an-image-layer","title":"Displaying an Image Layer\u00b6","text":""},{"location":"examples/rasterdata/#displaying-a-video-layer","title":"Displaying a Video Layer\u00b6","text":""},{"location":"examples/rasterdata/#displaying-a-wms-layer","title":"Displaying a WMS Layer\u00b6","text":""}]}